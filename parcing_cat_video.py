import googleapiclient.discovery
import os
import time
import subprocess
import cv2
import numpy as np
from ultralytics import YOLO
import re

# üîπ –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (True = –±–æ–ª—å—à–µ –ª–æ–≥–æ–≤)
DEBUG = True  

# üîπ YouTube API-–∫–ª—é—á
API_KEY = "YOUTUBE_API_KEY"

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_VIDEOS = 500  
MAX_DOWNLOADS = 50  
VIDEO_DIR = "cat_videos/"  
PROCESSED_VIDEOS_FILE = "processed_videos.txt"  
LOG_FILE = "logs.txt"  

# üîπ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
queries = ["funny cat", "cute kitten", "crazy cat moments", "kitten exploring"]

# üîπ –§–∏–ª—å—Ç—Ä AI-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –∏ –∞–Ω–∏–º–∞—Ü–∏–π
ban_words = ["compilation", "mix", "AI", "GAN", "animation", "dance", "CGI", "cartoon", "plasticine", "synthesized", "3d model"]

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YouTube API
youtube = googleapiclient.discovery.build("youtube", "v3", developerKey=API_KEY)

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º YOLOv8
model = YOLO("yolov8s.pt")

# üîπ –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log(msg):
    if DEBUG:
        print(msg)

def log_rejection(video_url, reason):
    with open(LOG_FILE, "a") as f:
        f.write(f"{video_url} - –û–¢–ö–õ–û–ù–ï–ù–û: {reason}\n")

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
def get_video_duration(video_id):
    request = youtube.videos().list(part="contentDetails", id=video_id)
    response = request.execute()

    if "items" in response and len(response["items"]) > 0:
        duration_str = response["items"][0]["contentDetails"]["duration"]
        match = re.match(r'PT(?:(\d+)M)?(?:(\d+)S)?', duration_str)

        if match:
            minutes = int(match.group(1)) if match.group(1) else 0
            seconds = int(match.group(2)) if match.group(2) else 0
            return minutes * 60 + seconds  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã

    return None  

# üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def search_cat_videos(query, max_results=50):
    videos = []
    next_page_token = None

    while len(videos) < max_results:
        request = youtube.search().list(
            q=query,
            part="snippet",
            type="video",
            maxResults=50,
            videoDuration="short",
            pageToken=next_page_token
        )
        response = request.execute()

        for item in response.get("items", []):
            video_title = item["snippet"]["title"].lower()
            video_id = item["id"]["videoId"]
            video_link = f"https://www.youtube.com/watch?v={video_id}"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            duration = get_video_duration(video_id)
            if duration is None or duration > 30:
                log(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {video_link} (–¥–ª–∏–Ω–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥, {duration} —Å–µ–∫)")
                continue  

            # –§–∏–ª—å—Ç—Ä AI-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if any(word in video_title for word in ban_words):
                log(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {video_link} (AI-–∫–æ–Ω—Ç–µ–Ω—Ç)")
                continue

            videos.append(video_link)
        
        next_page_token = response.get("nextPageToken")
        if not next_page_token:
            break  

    return videos[:max_results]

# üîπ –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
def download_video(video_url, output_path):
    try:
        command = ["yt-dlp", "-f", "best[ext=mp4]", "-o", output_path, video_url]
        subprocess.run(command, check=True)
        return True
    except subprocess.CalledProcessError:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {video_url}")
        return False

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
def extract_frames(video_path, frame_rate=10):
    cap = cv2.VideoCapture(video_path)
    frames = []
    count = 0
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        if count % frame_rate == 0:
            frames.append(frame)
        count += 1
    cap.release()
    return frames

# üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ç–æ–≤
def detect_cat(frame):
    results = model(frame, imgsz=640)
    for obj in results[0].boxes:
        if int(obj.cls[0]) == 15:  # –ö–æ—Ç
            return True
    return False

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ò–ò-–∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–µ–∫—Å—Ç—É—Ä–µ
def detect_texture(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    laplacian = cv2.Laplacian(gray, cv2.CV_64F).var()
    return laplacian > 120  # –ï—Å–ª–∏ <120 ‚Äî —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ò–ò-–∫–æ—Ç

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ
def check_video_for_cats(video_url, save_path):
    if not download_video(video_url, save_path):
        log_rejection(video_url, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        return False

    frames = extract_frames(save_path)
    if len(frames) == 0:
        log_rejection(video_url, "–í–∏–¥–µ–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–¥—Ä–æ–≤")
        os.remove(save_path)
        return False

    cat_count = sum(detect_cat(frame) for frame in frames)
    cat_probability = cat_count / len(frames)

    texture_good = sum(detect_texture(frame) for frame in frames) / len(frames) > 0.5

    if cat_probability < 0.5:
        log_rejection(video_url, "–ö–æ—Ç–æ–≤ –≤ –∫–∞–¥—Ä–µ < 50%")
        os.remove(save_path)
        return False

    if not texture_good:
        log_rejection(video_url, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –≥–ª–∞–¥–∫–æ–µ (–ò–ò)")
        os.remove(save_path)
        return False

    print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {save_path}")
    with open(PROCESSED_VIDEOS_FILE, "a") as f:
        f.write(video_url + "\n")
    return True

# üîπ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
downloaded_videos = 0
for query in queries:
    videos = search_cat_videos(query)
    log(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")

    for video in videos:
        if downloaded_videos >= MAX_DOWNLOADS:
            break

        video_filename = f"{VIDEO_DIR}cat_video_{downloaded_videos + 1}.mp4"
        log(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞: {video}")

        if check_video_for_cats(video, video_filename):
            downloaded_videos += 1

print(f"üéâ –ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {downloaded_videos} –≤–∏–¥–µ–æ —Å –∫–æ—Ç–∞–º–∏.")
